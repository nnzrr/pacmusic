name: Deploy Production ðŸš€

on:
  release:
    types:
    - published
    - edited

jobs:
  deploy-production:
    name: Deploy to staging server
    runs-on: ubuntu-latest

    steps:
      - name: Execute deployment command
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pacmusic
          APP_TAG: v1.0.0
          APP_PROD_PORT: ${{ secrets.APP_PROD_PORT }}
          MINIO_PROD_ENDPOINT: ${{ secrets.MINIO_PROD_ENDPOINT }}
          MINIO_PROD_ACCESS_KEY: ${{ secrets.MINIO_PROD_ACCESS_KEY }}
          MINIO_PROD_SECRET_KEY: ${{ secrets.MINIO_PROD_SECRET_KEY }}

        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          envs: APP_IMAGE, APP_TAG, APP_PROD_PORT, MINIO_PROD_ENDPOINT, MINIO_PROD_ACCESS_KEY, MINIO_PROD_SECRET_KEY
          script:

            sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN

            if [[ -d "/home/ubuntu/${APP_PROD_PATH}" ]]; then
              cd /home/ubuntu/$APP_PROD_PATH
              sudo docker compose down
              git pull --rebase
            else
              ssh-keyscan github.com > ~/.ssh/known_hosts
              git clone $GIT_URL /home/ubuntu/$APP_PROD_PATH
            fi

            echo "APP_IMAGE=${DOCKERHUB_USERNAME}/pacmusic" > .env
            echo "APP_TAG=$APP_TAG" >> .env
            echo "APP_PROD_PORT=$APP_PROD_PORT" >> .env
            echo "MINIO_PROD_ENDPOINT=$MINIO_PROD_ENDPOINT" >> .env
            echo "MINIO_PROD_ACCESS_KEY=$MINIO_PROD_ACCESS_KEY" >> .env
            echo "MINIO_PROD_SECRET_KEY=$MINIO_PROD_SECRET_KEY" >> .env

            sudo docker compose up --build --detach pacmusic-prod

      - name: Hit Endpoint
        run: |
          sleep 20
          curl ${{ secrets.PROD_URL }}
